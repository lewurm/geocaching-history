// Generated by psc version 0.7.0.0
"use strict";
var Prelude = require("Prelude");
var Data_Enum = require("Data.Enum");
var Data_Maybe = require("Data.Maybe");
var None = (function () {
    function None() {

    };
    None.value = new None();
    return None;
})();
var Capturing = (function () {
    function Capturing() {

    };
    Capturing.value = new Capturing();
    return Capturing;
})();
var AtTarget = (function () {
    function AtTarget() {

    };
    AtTarget.value = new AtTarget();
    return AtTarget;
})();
var Bubbling = (function () {
    function Bubbling() {

    };
    Bubbling.value = new Bubbling();
    return Bubbling;
})();
var toEnumEventPhase = function (_354) {
    if (_354 === 0) {
        return new Data_Maybe.Just(None.value);
    };
    if (_354 === 1) {
        return new Data_Maybe.Just(Capturing.value);
    };
    if (_354 === 2) {
        return new Data_Maybe.Just(AtTarget.value);
    };
    if (_354 === 3) {
        return new Data_Maybe.Just(Bubbling.value);
    };
    return Data_Maybe.Nothing.value;
};
var fromEnumEventPhase = function (_355) {
    if (_355 instanceof None) {
        return 0;
    };
    if (_355 instanceof Capturing) {
        return 1;
    };
    if (_355 instanceof AtTarget) {
        return 2;
    };
    if (_355 instanceof Bubbling) {
        return 3;
    };
    throw new Error("Failed pattern match at /home/travis/build/lewurm/geocaching-history/front-end/bower_components/purescript-dom/src/DOM/Event/EventPhase.purs line 44, column 1 - line 45, column 1: " + [ _355.constructor.name ]);
};
var eqEventPhase = new Prelude.Eq(function (_356) {
    return function (_357) {
        if (_356 instanceof None && _357 instanceof None) {
            return true;
        };
        if (_356 instanceof Capturing && _357 instanceof Capturing) {
            return true;
        };
        if (_356 instanceof AtTarget && _357 instanceof AtTarget) {
            return true;
        };
        if (_356 instanceof Bubbling && _357 instanceof Bubbling) {
            return true;
        };
        return false;
    };
});
var ordEventPhase = new Prelude.Ord(function () {
    return eqEventPhase;
}, function (x) {
    return function (y) {
        return Prelude.compare(Prelude.ordInt)(fromEnumEventPhase(x))(fromEnumEventPhase(y));
    };
});
var boundedEventPhase = new Prelude.Bounded(None.value, Bubbling.value);
var boundedOrdEventPhase = new Prelude.BoundedOrd(function () {
    return boundedEventPhase;
}, function () {
    return ordEventPhase;
});
var enumEventPhase = new Data_Enum.Enum(function () {
    return boundedEventPhase;
}, 4, fromEnumEventPhase, Data_Enum.defaultPred(toEnumEventPhase)(fromEnumEventPhase), Data_Enum.defaultSucc(toEnumEventPhase)(fromEnumEventPhase), toEnumEventPhase);
module.exports = {
    None: None, 
    Capturing: Capturing, 
    AtTarget: AtTarget, 
    Bubbling: Bubbling, 
    eqEventPhase: eqEventPhase, 
    ordEventPhase: ordEventPhase, 
    boundedEventPhase: boundedEventPhase, 
    boundedOrdEventPhase: boundedOrdEventPhase, 
    enumEventPhase: enumEventPhase
};
