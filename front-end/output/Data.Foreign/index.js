// Generated by psc version 0.7.0.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Data_Function = require("Data.Function");
var Data_Maybe = require("Data.Maybe");
var Data_String = require("Data.String");
var Data_Either = require("Data.Either");
var Data_Int = require("Data.Int");
var TypeMismatch = (function () {
    function TypeMismatch(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    TypeMismatch.create = function (value0) {
        return function (value1) {
            return new TypeMismatch(value0, value1);
        };
    };
    return TypeMismatch;
})();
var ErrorAtIndex = (function () {
    function ErrorAtIndex(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ErrorAtIndex.create = function (value0) {
        return function (value1) {
            return new ErrorAtIndex(value0, value1);
        };
    };
    return ErrorAtIndex;
})();
var ErrorAtProperty = (function () {
    function ErrorAtProperty(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ErrorAtProperty.create = function (value0) {
        return function (value1) {
            return new ErrorAtProperty(value0, value1);
        };
    };
    return ErrorAtProperty;
})();
var JSONError = (function () {
    function JSONError(value0) {
        this.value0 = value0;
    };
    JSONError.create = function (value0) {
        return new JSONError(value0);
    };
    return JSONError;
})();
var unsafeReadTagged = function (tag) {
    return function (value) {
        if (Prelude["=="](Prelude.eqString)($foreign.tagOf(value))(tag)) {
            return Prelude.pure(Data_Either.applicativeEither)($foreign.unsafeFromForeign(value));
        };
        return new Data_Either.Left(new TypeMismatch(tag, $foreign.tagOf(value)));
    };
};
var showForeignError = new Prelude.Show(function (_270) {
    if (_270 instanceof TypeMismatch) {
        return "Type mismatch: expected " + (_270.value0 + (", found " + _270.value1));
    };
    if (_270 instanceof ErrorAtIndex) {
        return "Error at array index " + (Prelude.show(Prelude.showInt)(_270.value0) + (": " + Prelude.show(showForeignError)(_270.value1)));
    };
    if (_270 instanceof ErrorAtProperty) {
        return "Error at property " + (Prelude.show(Prelude.showString)(_270.value0) + (": " + Prelude.show(showForeignError)(_270.value1)));
    };
    if (_270 instanceof JSONError) {
        return "JSON error: " + _270.value0;
    };
    throw new Error("Failed pattern match: " + [ _270.constructor.name ]);
});
var readString = unsafeReadTagged("String");
var readNumber = unsafeReadTagged("Number");
var readInt = function (value) {
    var error = Data_Either.Left.create(new TypeMismatch("Int", $foreign.tagOf(value)));
    var fromNumber = Prelude["<<<"](Prelude.semigroupoidFn)(Data_Maybe.maybe(error)(Prelude.pure(Data_Either.applicativeEither)))(Data_Int.fromNumber);
    return Data_Either.either(Prelude["const"](error))(fromNumber)(readNumber(value));
};
var readChar = function (value) {
    var error = Data_Either.Left.create(new TypeMismatch("Char", $foreign.tagOf(value)));
    var fromString = Prelude["<<<"](Prelude.semigroupoidFn)(Data_Maybe.maybe(error)(Prelude.pure(Data_Either.applicativeEither)))(Data_String.toChar);
    return Data_Either.either(Prelude["const"](error))(fromString)(readString(value));
};
var readBoolean = unsafeReadTagged("Boolean");
var readArray = function (value) {
    if ($foreign.isArray(value)) {
        return Prelude.pure(Data_Either.applicativeEither)($foreign.unsafeFromForeign(value));
    };
    return new Data_Either.Left(new TypeMismatch("array", $foreign.tagOf(value)));
};
var parseJSON = function (json) {
    return $foreign.parseJSONImpl(Prelude["<<<"](Prelude.semigroupoidFn)(Data_Either.Left.create)(JSONError.create), Data_Either.Right.create, json);
};
var eqForeignError = new Prelude.Eq(function (_271) {
    return function (_272) {
        if (_271 instanceof TypeMismatch && _272 instanceof TypeMismatch) {
            return Prelude["&&"](Prelude.booleanAlgebraBoolean)(Prelude["=="](Prelude.eqString)(_271.value0)(_272.value0))(Prelude["=="](Prelude.eqString)(_271.value1)(_272.value1));
        };
        if (_271 instanceof ErrorAtIndex && _272 instanceof ErrorAtIndex) {
            return Prelude["&&"](Prelude.booleanAlgebraBoolean)(Prelude["=="](Prelude.eqInt)(_271.value0)(_272.value0))(Prelude["=="](eqForeignError)(_271.value1)(_272.value1));
        };
        if (_271 instanceof ErrorAtProperty && _272 instanceof ErrorAtProperty) {
            return Prelude["&&"](Prelude.booleanAlgebraBoolean)(Prelude["=="](Prelude.eqString)(_271.value0)(_272.value0))(Prelude["=="](eqForeignError)(_271.value1)(_272.value1));
        };
        if (_271 instanceof JSONError && _272 instanceof JSONError) {
            return Prelude["=="](Prelude.eqString)(_271.value0)(_272.value0);
        };
        return false;
    };
});
module.exports = {
    TypeMismatch: TypeMismatch, 
    ErrorAtIndex: ErrorAtIndex, 
    ErrorAtProperty: ErrorAtProperty, 
    JSONError: JSONError, 
    readArray: readArray, 
    readInt: readInt, 
    readNumber: readNumber, 
    readBoolean: readBoolean, 
    readChar: readChar, 
    readString: readString, 
    unsafeReadTagged: unsafeReadTagged, 
    parseJSON: parseJSON, 
    showForeignError: showForeignError, 
    eqForeignError: eqForeignError, 
    isArray: $foreign.isArray, 
    isUndefined: $foreign.isUndefined, 
    isNull: $foreign.isNull, 
    tagOf: $foreign.tagOf, 
    typeOf: $foreign.typeOf, 
    unsafeFromForeign: $foreign.unsafeFromForeign, 
    toForeign: $foreign.toForeign
};
