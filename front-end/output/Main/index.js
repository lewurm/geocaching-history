// Generated by psc version 0.7.0.0
"use strict";
var Prelude = require("Prelude");
var Control_Monad_Eff_Console = require("Control.Monad.Eff.Console");
var Leaflet_LatLng = require("Leaflet.LatLng");
var Leaflet_LatLngBounds = require("Leaflet.LatLngBounds");
var React_DOM = require("React.DOM");
var React = require("React");
var React_DOM_Props = require("React.DOM.Props");
var DOM_HTML = require("DOM.HTML");
var DOM_HTML_Window = require("DOM.HTML.Window");
var Data_Maybe_Unsafe = require("Data.Maybe.Unsafe");
var Data_Nullable = require("Data.Nullable");
var DOM_HTML_Document = require("DOM.HTML.Document");
var DOM_HTML_Types = require("DOM.HTML.Types");
var Leaflet_Map = require("Leaflet.Map");
var Leaflet_TileLayer = require("Leaflet.TileLayer");
var Leaflet_Types = require("Leaflet.Types");
var Leaflet_Icon = require("Leaflet.Icon");
var Leaflet_Marker = require("Leaflet.Marker");
var Debug_Trace = require("Debug.Trace");
var Data_Tuple = require("Data.Tuple");
var Data_String = require("Data.String");
var Control_Monad_Eff = require("Control.Monad.Eff");
var DOM = require("DOM");
var DOM_Node_Types = require("DOM.Node.Types");
var mapBoxUrl = "https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6IjZjNmRjNzk3ZmE2MTcwOTEwMGY0MzU3YjUzOWFmNWZhIn0.Y8bhBaUMqFiPrDRW9hieoQ";
var incrementCounter = function (ctx) {
    return function (e) {
        return function __do() {
            var _18 = React.readState(ctx)();
            return React.writeState(ctx)(Prelude["+"](Prelude.semiringInt)(_18)(1))();
        };
    };
};
var counter = React.createClass(React.spec(0)(function (ctx) {
    return function __do() {
        var _19 = React.readState(ctx)();
        return Prelude["return"](Control_Monad_Eff.applicativeEff)(React_DOM.p([ React_DOM_Props.className("Counter"), React_DOM_Props.onClick(incrementCounter(ctx)) ])([ React_DOM.text(Prelude.show(Prelude.showInt)(_19)), React_DOM.text(" Click me to increment!") ]))();
    };
}));
var convert_degrees_to_decimal = function (degrees) {
    return function (minutes) {
        var _491 = degrees >= 0.0;
        if (_491) {
            return degrees + minutes / 60.0;
        };
        if (!_491) {
            return degrees - minutes / 60.0;
        };
        throw new Error("Failed pattern match at /home/travis/build/lewurm/geocaching-history/front-end/src/Main.purs line 74, column 1 - line 75, column 1: " + [ _491.constructor.name ]);
    };
};
var main = function __do() {
    Control_Monad_Eff_Console.log("Hello sailor!")();
    var north = convert_degrees_to_decimal(37.0)(46.5);
    Control_Monad_Eff_Console.log("sup1: " + Prelude.show(Prelude.showNumber)(north))();
    var west = convert_degrees_to_decimal(-122.0)(25.5);
    Control_Monad_Eff_Console.log("sup2: " + Prelude.show(Prelude.showNumber)(west))();
    var ll = Leaflet_LatLng.latLng(north)(west);
    var lower = Leaflet_LatLng.latLng(convert_degrees_to_decimal(35.0)(42.5))(convert_degrees_to_decimal(-115.0)(23.0));
    var upper = Leaflet_LatLng.latLng(convert_degrees_to_decimal(39.0)(49.5))(convert_degrees_to_decimal(-128.0)(28.0));
    var bounds = Leaflet_LatLngBounds.latLngBounds(lower)(upper);
    var opts = {
        attributionControl: true, 
        center: ll, 
        layers: [  ], 
        maxBounds: bounds, 
        zoom: 12.0
    };
    var ui = React_DOM.div([  ])([ React.createFactory(counter)({}), React_DOM.div([ React_DOM_Props._id("map"), React_DOM_Props.style({
        width: "600px", 
        height: "400px"
    }) ])([  ]) ]);
    var container = function __do() {
        var _14 = DOM_HTML.window();
        var _13 = DOM_HTML_Window.document(_14)();
        var _12 = Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["<$>"](Prelude.functorFn)(Data_Maybe_Unsafe.fromJust)(Data_Nullable.toMaybe))(DOM_HTML_Document.body(_13))();
        return Prelude["return"](Control_Monad_Eff.applicativeEff)(DOM_HTML_Types.htmlElementToElement(_12))();
    };
    Prelude[">>="](Control_Monad_Eff.bindEff)(container)(React.render(ui))();
    var _17 = Leaflet_Map.createMap("map")(opts)();
    var _16 = Leaflet_TileLayer.tileLayer(mapBoxUrl)({
        id: "mapbox.streets", 
        subdomains: [  ]
    })();
    Leaflet_Types.addTo(Leaflet_TileLayer.tileLayerLayer)(_16)(_17)();
    var _15 = Leaflet_Icon.icon({
        iconUrl: "http://www.geocaching.com/images/wpttypes/sm/2.gif", 
        iconSize: {
            x: 14, 
            y: 14
        }
    })();
    return Leaflet_Types.addTo(Leaflet_Marker.markerLayer)(Leaflet_Marker.marker({
        icon: _15
    })(ll))(_17)();
};
module.exports = {
    counter: counter, 
    incrementCounter: incrementCounter, 
    convert_degrees_to_decimal: convert_degrees_to_decimal, 
    main: main, 
    mapBoxUrl: mapBoxUrl
};
