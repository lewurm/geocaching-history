// Generated by psc version 0.7.0.0
"use strict";
var Prelude = require("Prelude");
var Data_Enum = require("Data.Enum");
var Data_Maybe = require("Data.Maybe");
var ElementNode = (function () {
    function ElementNode() {

    };
    ElementNode.value = new ElementNode();
    return ElementNode;
})();
var AttributeNode = (function () {
    function AttributeNode() {

    };
    AttributeNode.value = new AttributeNode();
    return AttributeNode;
})();
var TextNode = (function () {
    function TextNode() {

    };
    TextNode.value = new TextNode();
    return TextNode;
})();
var CDATASectionNode = (function () {
    function CDATASectionNode() {

    };
    CDATASectionNode.value = new CDATASectionNode();
    return CDATASectionNode;
})();
var EntityReferenceNode = (function () {
    function EntityReferenceNode() {

    };
    EntityReferenceNode.value = new EntityReferenceNode();
    return EntityReferenceNode;
})();
var EntityNode = (function () {
    function EntityNode() {

    };
    EntityNode.value = new EntityNode();
    return EntityNode;
})();
var ProcessingInstructionNode = (function () {
    function ProcessingInstructionNode() {

    };
    ProcessingInstructionNode.value = new ProcessingInstructionNode();
    return ProcessingInstructionNode;
})();
var CommentNode = (function () {
    function CommentNode() {

    };
    CommentNode.value = new CommentNode();
    return CommentNode;
})();
var DocumentNode = (function () {
    function DocumentNode() {

    };
    DocumentNode.value = new DocumentNode();
    return DocumentNode;
})();
var DocumentTypeNode = (function () {
    function DocumentTypeNode() {

    };
    DocumentTypeNode.value = new DocumentTypeNode();
    return DocumentTypeNode;
})();
var DocumentFragmentNode = (function () {
    function DocumentFragmentNode() {

    };
    DocumentFragmentNode.value = new DocumentFragmentNode();
    return DocumentFragmentNode;
})();
var NotationNode = (function () {
    function NotationNode() {

    };
    NotationNode.value = new NotationNode();
    return NotationNode;
})();
var toEnumNodeType = function (_377) {
    if (_377 === 1) {
        return new Data_Maybe.Just(ElementNode.value);
    };
    if (_377 === 2) {
        return new Data_Maybe.Just(AttributeNode.value);
    };
    if (_377 === 3) {
        return new Data_Maybe.Just(TextNode.value);
    };
    if (_377 === 4) {
        return new Data_Maybe.Just(CDATASectionNode.value);
    };
    if (_377 === 5) {
        return new Data_Maybe.Just(EntityReferenceNode.value);
    };
    if (_377 === 6) {
        return new Data_Maybe.Just(EntityNode.value);
    };
    if (_377 === 7) {
        return new Data_Maybe.Just(ProcessingInstructionNode.value);
    };
    if (_377 === 8) {
        return new Data_Maybe.Just(CommentNode.value);
    };
    if (_377 === 9) {
        return new Data_Maybe.Just(DocumentNode.value);
    };
    if (_377 === 10) {
        return new Data_Maybe.Just(DocumentTypeNode.value);
    };
    if (_377 === 11) {
        return new Data_Maybe.Just(DocumentFragmentNode.value);
    };
    if (_377 === 12) {
        return new Data_Maybe.Just(NotationNode.value);
    };
    return Data_Maybe.Nothing.value;
};
var fromEnumNodeType = function (_378) {
    if (_378 instanceof ElementNode) {
        return 1;
    };
    if (_378 instanceof AttributeNode) {
        return 2;
    };
    if (_378 instanceof TextNode) {
        return 3;
    };
    if (_378 instanceof CDATASectionNode) {
        return 4;
    };
    if (_378 instanceof EntityReferenceNode) {
        return 5;
    };
    if (_378 instanceof EntityNode) {
        return 6;
    };
    if (_378 instanceof ProcessingInstructionNode) {
        return 7;
    };
    if (_378 instanceof CommentNode) {
        return 8;
    };
    if (_378 instanceof DocumentNode) {
        return 9;
    };
    if (_378 instanceof DocumentTypeNode) {
        return 10;
    };
    if (_378 instanceof DocumentFragmentNode) {
        return 11;
    };
    if (_378 instanceof NotationNode) {
        return 12;
    };
    throw new Error("Failed pattern match at /home/travis/build/lewurm/geocaching-history/front-end/bower_components/purescript-dom/src/DOM/Node/NodeType.purs line 67, column 1 - line 68, column 1: " + [ _378.constructor.name ]);
};
var eqNodeType = new Prelude.Eq(function (_379) {
    return function (_380) {
        if (_379 instanceof ElementNode && _380 instanceof ElementNode) {
            return true;
        };
        if (_379 instanceof AttributeNode && _380 instanceof AttributeNode) {
            return true;
        };
        if (_379 instanceof TextNode && _380 instanceof TextNode) {
            return true;
        };
        if (_379 instanceof CDATASectionNode && _380 instanceof CDATASectionNode) {
            return true;
        };
        if (_379 instanceof EntityReferenceNode && _380 instanceof EntityReferenceNode) {
            return true;
        };
        if (_379 instanceof EntityNode && _380 instanceof EntityNode) {
            return true;
        };
        if (_379 instanceof ProcessingInstructionNode && _380 instanceof ProcessingInstructionNode) {
            return true;
        };
        if (_379 instanceof CommentNode && _380 instanceof CommentNode) {
            return true;
        };
        if (_379 instanceof DocumentNode && _380 instanceof DocumentNode) {
            return true;
        };
        if (_379 instanceof DocumentTypeNode && _380 instanceof DocumentTypeNode) {
            return true;
        };
        if (_379 instanceof DocumentFragmentNode && _380 instanceof DocumentFragmentNode) {
            return true;
        };
        if (_379 instanceof NotationNode && _380 instanceof NotationNode) {
            return true;
        };
        return false;
    };
});
var ordNodeType = new Prelude.Ord(function () {
    return eqNodeType;
}, function (x) {
    return function (y) {
        return Prelude.compare(Prelude.ordInt)(fromEnumNodeType(x))(fromEnumNodeType(y));
    };
});
var boundedNodeType = new Prelude.Bounded(ElementNode.value, NotationNode.value);
var boundedOrdNodeType = new Prelude.BoundedOrd(function () {
    return boundedNodeType;
}, function () {
    return ordNodeType;
});
var enumNodeType = new Data_Enum.Enum(function () {
    return boundedNodeType;
}, 4, fromEnumNodeType, Data_Enum.defaultPred(toEnumNodeType)(fromEnumNodeType), Data_Enum.defaultSucc(toEnumNodeType)(fromEnumNodeType), toEnumNodeType);
module.exports = {
    ElementNode: ElementNode, 
    AttributeNode: AttributeNode, 
    TextNode: TextNode, 
    CDATASectionNode: CDATASectionNode, 
    EntityReferenceNode: EntityReferenceNode, 
    EntityNode: EntityNode, 
    ProcessingInstructionNode: ProcessingInstructionNode, 
    CommentNode: CommentNode, 
    DocumentNode: DocumentNode, 
    DocumentTypeNode: DocumentTypeNode, 
    DocumentFragmentNode: DocumentFragmentNode, 
    NotationNode: NotationNode, 
    eqNodeType: eqNodeType, 
    ordNodeType: ordNodeType, 
    boundedNodeType: boundedNodeType, 
    boundedOrdNodeType: boundedOrdNodeType, 
    enumNodeType: enumNodeType
};
