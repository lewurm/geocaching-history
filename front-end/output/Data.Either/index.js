// Generated by psc version 0.7.0.0
"use strict";
var Prelude = require("Prelude");
var Data_Monoid = require("Data.Monoid");
var Control_Alt = require("Control.Alt");
var Control_Extend = require("Control.Extend");
var Data_Bifoldable = require("Data.Bifoldable");
var Data_Bifunctor = require("Data.Bifunctor");
var Data_Bitraversable = require("Data.Bitraversable");
var Data_Foldable = require("Data.Foldable");
var Data_Traversable = require("Data.Traversable");
var Left = (function () {
    function Left(value0) {
        this.value0 = value0;
    };
    Left.create = function (value0) {
        return new Left(value0);
    };
    return Left;
})();
var Right = (function () {
    function Right(value0) {
        this.value0 = value0;
    };
    Right.create = function (value0) {
        return new Right(value0);
    };
    return Right;
})();
var showEither = function (__dict_Show_2) {
    return function (__dict_Show_3) {
        return new Prelude.Show(function (_253) {
            if (_253 instanceof Left) {
                return "Left (" + (Prelude.show(__dict_Show_2)(_253.value0) + ")");
            };
            if (_253 instanceof Right) {
                return "Right (" + (Prelude.show(__dict_Show_3)(_253.value0) + ")");
            };
            throw new Error("Failed pattern match at /home/travis/build/lewurm/geocaching-history/front-end/bower_components/purescript-either/src/Data/Either.purs line 174, column 1 - line 181, column 1: " + [ _253.constructor.name ]);
        });
    };
};
var functorEither = new Prelude.Functor(function (f) {
    return function (_248) {
        if (_248 instanceof Left) {
            return new Left(_248.value0);
        };
        if (_248 instanceof Right) {
            return new Right(f(_248.value0));
        };
        throw new Error("Failed pattern match at /home/travis/build/lewurm/geocaching-history/front-end/bower_components/purescript-either/src/Data/Either.purs line 52, column 1 - line 56, column 1: " + [ f.constructor.name, _248.constructor.name ]);
    };
});
var foldableEither = new Data_Foldable.Foldable(function (__dict_Monoid_8) {
    return function (f) {
        return function (_260) {
            if (_260 instanceof Left) {
                return Data_Monoid.mempty(__dict_Monoid_8);
            };
            if (_260 instanceof Right) {
                return f(_260.value0);
            };
            throw new Error("Failed pattern match at /home/travis/build/lewurm/geocaching-history/front-end/bower_components/purescript-either/src/Data/Either.purs line 201, column 1 - line 209, column 1: " + [ f.constructor.name, _260.constructor.name ]);
        };
    };
}, function (f) {
    return function (z) {
        return function (_259) {
            if (_259 instanceof Left) {
                return z;
            };
            if (_259 instanceof Right) {
                return f(z)(_259.value0);
            };
            throw new Error("Failed pattern match at /home/travis/build/lewurm/geocaching-history/front-end/bower_components/purescript-either/src/Data/Either.purs line 201, column 1 - line 209, column 1: " + [ f.constructor.name, z.constructor.name, _259.constructor.name ]);
        };
    };
}, function (f) {
    return function (z) {
        return function (_258) {
            if (_258 instanceof Left) {
                return z;
            };
            if (_258 instanceof Right) {
                return f(_258.value0)(z);
            };
            throw new Error("Failed pattern match at /home/travis/build/lewurm/geocaching-history/front-end/bower_components/purescript-either/src/Data/Either.purs line 201, column 1 - line 209, column 1: " + [ f.constructor.name, z.constructor.name, _258.constructor.name ]);
        };
    };
});
var traversableEither = new Data_Traversable.Traversable(function () {
    return foldableEither;
}, function () {
    return functorEither;
}, function (__dict_Applicative_1) {
    return function (_265) {
        if (_265 instanceof Left) {
            return Prelude.pure(__dict_Applicative_1)(new Left(_265.value0));
        };
        if (_265 instanceof Right) {
            return Prelude["<$>"]((__dict_Applicative_1["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Right.create)(_265.value0);
        };
        throw new Error("Failed pattern match at /home/travis/build/lewurm/geocaching-history/front-end/bower_components/purescript-either/src/Data/Either.purs line 217, column 1 - line 223, column 1: " + [ _265.constructor.name ]);
    };
}, function (__dict_Applicative_0) {
    return function (f) {
        return function (_264) {
            if (_264 instanceof Left) {
                return Prelude.pure(__dict_Applicative_0)(new Left(_264.value0));
            };
            if (_264 instanceof Right) {
                return Prelude["<$>"]((__dict_Applicative_0["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Right.create)(f(_264.value0));
            };
            throw new Error("Failed pattern match at /home/travis/build/lewurm/geocaching-history/front-end/bower_components/purescript-either/src/Data/Either.purs line 217, column 1 - line 223, column 1: " + [ f.constructor.name, _264.constructor.name ]);
        };
    };
});
var extendEither = new Control_Extend.Extend(function () {
    return functorEither;
}, function (f) {
    return function (_252) {
        if (_252 instanceof Left) {
            return new Left(_252.value0);
        };
        return new Right(f(_252));
    };
});
var eqEither = function (__dict_Eq_9) {
    return function (__dict_Eq_10) {
        return new Prelude.Eq(function (_254) {
            return function (_255) {
                if (_254 instanceof Left && _255 instanceof Left) {
                    return Prelude["=="](__dict_Eq_9)(_254.value0)(_255.value0);
                };
                if (_254 instanceof Right && _255 instanceof Right) {
                    return Prelude["=="](__dict_Eq_10)(_254.value0)(_255.value0);
                };
                return false;
            };
        });
    };
};
var ordEither = function (__dict_Ord_6) {
    return function (__dict_Ord_7) {
        return new Prelude.Ord(function () {
            return eqEither(__dict_Ord_6["__superclass_Prelude.Eq_0"]())(__dict_Ord_7["__superclass_Prelude.Eq_0"]());
        }, function (_256) {
            return function (_257) {
                if (_256 instanceof Left && _257 instanceof Left) {
                    return Prelude.compare(__dict_Ord_6)(_256.value0)(_257.value0);
                };
                if (_256 instanceof Right && _257 instanceof Right) {
                    return Prelude.compare(__dict_Ord_7)(_256.value0)(_257.value0);
                };
                if (_256 instanceof Left) {
                    return Prelude.LT.value;
                };
                if (_257 instanceof Left) {
                    return Prelude.GT.value;
                };
                throw new Error("Failed pattern match at /home/travis/build/lewurm/geocaching-history/front-end/bower_components/purescript-either/src/Data/Either.purs line 191, column 1 - line 197, column 1: " + [ _256.constructor.name, _257.constructor.name ]);
            };
        });
    };
};
var either = function (f) {
    return function (g) {
        return function (_247) {
            if (_247 instanceof Left) {
                return f(_247.value0);
            };
            if (_247 instanceof Right) {
                return g(_247.value0);
            };
            throw new Error("Failed pattern match at /home/travis/build/lewurm/geocaching-history/front-end/bower_components/purescript-either/src/Data/Either.purs line 28, column 1 - line 29, column 1: " + [ f.constructor.name, g.constructor.name, _247.constructor.name ]);
        };
    };
};
var isLeft = either(Prelude["const"](true))(Prelude["const"](false));
var isRight = either(Prelude["const"](false))(Prelude["const"](true));
var boundedEither = function (__dict_Bounded_11) {
    return function (__dict_Bounded_12) {
        return new Prelude.Bounded(new Left(Prelude.bottom(__dict_Bounded_11)), new Right(Prelude.top(__dict_Bounded_12)));
    };
};
var bifunctorEither = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (_249) {
            if (_249 instanceof Left) {
                return new Left(f(_249.value0));
            };
            if (_249 instanceof Right) {
                return new Right(g(_249.value0));
            };
            throw new Error("Failed pattern match at /home/travis/build/lewurm/geocaching-history/front-end/bower_components/purescript-either/src/Data/Either.purs line 56, column 1 - line 92, column 1: " + [ f.constructor.name, g.constructor.name, _249.constructor.name ]);
        };
    };
});
var bifoldableEither = new Data_Bifoldable.Bifoldable(function (__dict_Monoid_15) {
    return function (f) {
        return function (g) {
            return function (_263) {
                if (_263 instanceof Left) {
                    return f(_263.value0);
                };
                if (_263 instanceof Right) {
                    return g(_263.value0);
                };
                throw new Error("Failed pattern match at /home/travis/build/lewurm/geocaching-history/front-end/bower_components/purescript-either/src/Data/Either.purs line 209, column 1 - line 217, column 1: " + [ f.constructor.name, g.constructor.name, _263.constructor.name ]);
            };
        };
    };
}, function (f) {
    return function (g) {
        return function (z) {
            return function (_262) {
                if (_262 instanceof Left) {
                    return f(z)(_262.value0);
                };
                if (_262 instanceof Right) {
                    return g(z)(_262.value0);
                };
                throw new Error("Failed pattern match at /home/travis/build/lewurm/geocaching-history/front-end/bower_components/purescript-either/src/Data/Either.purs line 209, column 1 - line 217, column 1: " + [ f.constructor.name, g.constructor.name, z.constructor.name, _262.constructor.name ]);
            };
        };
    };
}, function (f) {
    return function (g) {
        return function (z) {
            return function (_261) {
                if (_261 instanceof Left) {
                    return f(_261.value0)(z);
                };
                if (_261 instanceof Right) {
                    return g(_261.value0)(z);
                };
                throw new Error("Failed pattern match at /home/travis/build/lewurm/geocaching-history/front-end/bower_components/purescript-either/src/Data/Either.purs line 209, column 1 - line 217, column 1: " + [ f.constructor.name, g.constructor.name, z.constructor.name, _261.constructor.name ]);
            };
        };
    };
});
var bitraversableEither = new Data_Bitraversable.Bitraversable(function () {
    return bifoldableEither;
}, function () {
    return bifunctorEither;
}, function (__dict_Applicative_14) {
    return function (_267) {
        if (_267 instanceof Left) {
            return Prelude["<$>"]((__dict_Applicative_14["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Left.create)(_267.value0);
        };
        if (_267 instanceof Right) {
            return Prelude["<$>"]((__dict_Applicative_14["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Right.create)(_267.value0);
        };
        throw new Error("Failed pattern match at /home/travis/build/lewurm/geocaching-history/front-end/bower_components/purescript-either/src/Data/Either.purs line 223, column 1 - line 229, column 1: " + [ _267.constructor.name ]);
    };
}, function (__dict_Applicative_13) {
    return function (f) {
        return function (g) {
            return function (_266) {
                if (_266 instanceof Left) {
                    return Prelude["<$>"]((__dict_Applicative_13["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Left.create)(f(_266.value0));
                };
                if (_266 instanceof Right) {
                    return Prelude["<$>"]((__dict_Applicative_13["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Right.create)(g(_266.value0));
                };
                throw new Error("Failed pattern match at /home/travis/build/lewurm/geocaching-history/front-end/bower_components/purescript-either/src/Data/Either.purs line 223, column 1 - line 229, column 1: " + [ f.constructor.name, g.constructor.name, _266.constructor.name ]);
            };
        };
    };
});
var applyEither = new Prelude.Apply(function () {
    return functorEither;
}, function (_250) {
    return function (r) {
        if (_250 instanceof Left) {
            return new Left(_250.value0);
        };
        if (_250 instanceof Right) {
            return Prelude["<$>"](functorEither)(_250.value0)(r);
        };
        throw new Error("Failed pattern match at /home/travis/build/lewurm/geocaching-history/front-end/bower_components/purescript-either/src/Data/Either.purs line 92, column 1 - line 116, column 1: " + [ _250.constructor.name, r.constructor.name ]);
    };
});
var bindEither = new Prelude.Bind(function () {
    return applyEither;
}, either(function (e) {
    return function (_246) {
        return new Left(e);
    };
})(function (a) {
    return function (f) {
        return f(a);
    };
}));
var semigroupEither = function (__dict_Semigroup_5) {
    return new Prelude.Semigroup(function (x) {
        return function (y) {
            return Prelude["<*>"](applyEither)(Prelude["<$>"](functorEither)(Prelude.append(__dict_Semigroup_5))(x))(y);
        };
    });
};
var semiringEither = function (__dict_Semiring_4) {
    return new Prelude.Semiring(function (x) {
        return function (y) {
            return Prelude["<*>"](applyEither)(Prelude["<$>"](functorEither)(Prelude.add(__dict_Semiring_4))(x))(y);
        };
    }, function (x) {
        return function (y) {
            return Prelude["<*>"](applyEither)(Prelude["<$>"](functorEither)(Prelude.mul(__dict_Semiring_4))(x))(y);
        };
    }, new Right(Prelude.one(__dict_Semiring_4)), new Right(Prelude.zero(__dict_Semiring_4)));
};
var applicativeEither = new Prelude.Applicative(function () {
    return applyEither;
}, Right.create);
var monadEither = new Prelude.Monad(function () {
    return applicativeEither;
}, function () {
    return bindEither;
});
var altEither = new Control_Alt.Alt(function () {
    return functorEither;
}, function (_251) {
    return function (r) {
        if (_251 instanceof Left) {
            return r;
        };
        return _251;
    };
});
module.exports = {
    Left: Left, 
    Right: Right, 
    isRight: isRight, 
    isLeft: isLeft, 
    either: either, 
    functorEither: functorEither, 
    bifunctorEither: bifunctorEither, 
    applyEither: applyEither, 
    applicativeEither: applicativeEither, 
    altEither: altEither, 
    bindEither: bindEither, 
    monadEither: monadEither, 
    extendEither: extendEither, 
    showEither: showEither, 
    eqEither: eqEither, 
    ordEither: ordEither, 
    boundedEither: boundedEither, 
    foldableEither: foldableEither, 
    bifoldableEither: bifoldableEither, 
    traversableEither: traversableEither, 
    bitraversableEither: bitraversableEither, 
    semiringEither: semiringEither, 
    semigroupEither: semigroupEither
};
